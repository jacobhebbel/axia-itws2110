import numpy as np

def calculateCagr(ev, bv, years):
    return np.round((np.power(ev / bv, 1 / years) - 1) * 100, 1)

def calculateRisk(prices_start, prices_end):
    prices_start = np.asarray(prices_start, dtype=float)
    prices_end = np.asarray(prices_end, dtype=float)
    daily_returns = (prices_end - prices_start) / prices_start
    return np.round(np.std(daily_returns, ddof=1) * 100, 1)

if __name__ == "__main__":

    # example of beginning and end of day prices for a year
    start_prices = [
    100.00, 100.20, 100.40, 100.60, 100.80, 101.00, 101.20, 101.40, 101.60, 101.80,
    102.00, 102.20, 102.40, 102.60, 102.80, 103.00, 103.20, 103.40, 103.60, 103.80,
    104.00, 104.20, 104.40, 104.60, 104.80, 105.00, 105.20, 105.40, 105.60, 105.80,
    106.00, 106.20, 106.40, 106.60, 106.80, 107.00, 107.20, 107.40, 107.60, 107.80,
    108.00, 108.20, 108.40, 108.60, 108.80, 109.00, 109.20, 109.40, 109.60, 109.80,
    110.00, 110.20, 110.40, 110.60, 110.80, 111.00, 111.20, 111.40, 111.60, 111.80,
    112.00, 112.20, 112.40, 112.60, 112.80, 113.00, 113.20, 113.40, 113.60, 113.80,
    114.00, 114.20, 114.40, 114.60, 114.80, 115.00, 115.20, 115.40, 115.60, 115.80,
    116.00, 116.20, 116.40, 116.60, 116.80, 117.00, 117.20, 117.40, 117.60, 117.80,
    118.00, 118.20, 118.40, 118.60, 118.80, 119.00, 119.20, 119.40, 119.60, 119.80,
    120.00, 120.20, 120.40, 120.60, 120.80, 121.00, 121.20, 121.40, 121.60, 121.80,
    122.00, 122.20, 122.40, 122.60, 122.80, 123.00, 123.20, 123.40, 123.60, 123.80,
    124.00, 124.20, 124.40, 124.60, 124.80, 125.00, 125.20, 125.40, 125.60, 125.80,
    126.00, 126.20, 126.40, 126.60, 126.80, 127.00, 127.20, 127.40, 127.60, 127.80,
    128.00, 128.20, 128.40, 128.60, 128.80, 129.00, 129.20, 129.40, 129.60, 129.80,
    130.00, 130.20, 130.40, 130.60, 130.80, 131.00, 131.20, 131.40, 131.60, 131.80,
    132.00, 132.20, 132.40, 132.60, 132.80, 133.00, 133.20, 133.40, 133.60, 133.80,
    134.00, 134.20, 134.40, 134.60, 134.80, 135.00, 135.20, 135.40, 135.60, 135.80,
    136.00, 136.20, 136.40, 136.60, 136.80, 137.00, 137.20, 137.40, 137.60, 137.80,
    138.00, 138.20, 138.40, 138.60, 138.80, 139.00, 139.20, 139.40, 139.60, 139.80,
    140.00, 140.20, 140.40, 140.60, 140.80, 141.00, 141.20, 141.40, 141.60, 141.80,
    142.00, 142.20, 142.40, 142.60, 142.80, 143.00, 143.20, 143.40, 143.60, 143.80,
    144.00, 144.20, 144.40, 144.60, 144.80, 145.00, 145.20, 145.40, 145.60, 145.80,
    146.00, 146.20, 146.40, 146.60, 146.80, 147.00, 147.20, 147.40, 147.60, 147.80,
    148.00, 148.20, 148.40, 148.60, 148.80, 149.00, 149.20, 149.40, 149.60, 149.80,
    149.80, 150.00
    ]

    end_prices = [
    100.89,100.94,101.03,101.02,101.08,101.15,101.24,101.29,101.33,101.38,
    101.46,101.50,101.57,101.61,101.67,101.72,101.79,101.85,101.89,101.95,
    102.01,102.07,102.13,102.18,102.24,102.30,102.35,102.40,102.46,102.51,
    102.56,102.61,102.66,102.71,102.76,102.80,102.85,102.89,102.93,102.96,
    103.00,103.04,103.07,103.10,103.13,103.16,103.18,103.20,103.22,103.24,
    103.25,103.26,103.27,103.28,103.29,103.29,103.29,103.29,103.29,103.28,
    103.27,103.26,103.25,103.23,103.21,103.19,103.17,103.15,103.13,103.10,
    103.07,103.04,103.01,102.98,102.95,102.91,102.88,102.84,102.80,102.76,
    102.72,102.67,102.63,102.58,102.54,102.49,102.44,102.39,102.34,102.29,
    102.24,102.19,102.13,102.08,102.03,101.97,101.91,101.86,101.80,101.74,
    101.68,101.62,101.56,101.50,101.44,101.38,101.31,101.25,101.19,101.12,
    101.06,100.99,100.93,100.86,100.79,100.72,100.65,100.59,100.52,100.45,
    100.38,100.31,100.24,100.17,100.10,100.03,99.96,99.89,99.82,99.75,
    99.68,99.61,99.54,99.47,99.40,99.33,99.26,99.19,99.12,99.05,
    98.98,98.91,98.84,98.77,98.70,98.63,98.56,98.49,98.42,98.35,
    98.28,98.21,98.14,98.07,98.00,97.93,97.86,97.79,97.72,97.65,
    97.58,97.51,97.44,97.37,97.30,97.23,97.16,97.09,97.02,96.95,
    96.88,96.81,96.74,96.67,96.60,96.53,96.46,96.39,96.32,96.25,
    96.18,96.11,96.04,95.97,95.90,95.83,95.76,95.69,95.62,95.55,
    95.48,95.41,95.34,95.27,95.20,95.13,95.06,94.99,94.92,94.85,
    94.78,94.71,94.64,94.57,94.50,94.43,94.36,94.29,94.22,94.15,
    94.08,94.01,93.94,93.87,93.80,93.73,93.66,93.59,93.52,93.45,
    93.38,93.31,93.24,93.17,93.10,93.03,92.96,92.89,92.82,92.75,
    92.68,92.61,92.54,92.47,92.40,92.33,92.26,92.19,92.12,92.05,
    91.98,91.91,91.84,91.77,91.70,91.63,91.56,91.49,91.42,91.35,91.28,91.21
    ]

    # store values in a variable
    cagr = calculateCagr(end_prices[-1], start_prices[0], len(start_prices)/252)
    risk = calculateRisk(start_prices, end_prices)

    # will figure out how data will be processed in and sent out later